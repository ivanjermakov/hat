diff --git a/src/buffer.zig b/src/buffer.zig
index ea5bb1c..59b968b 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -23,8 +23,9 @@ const lsp = @import("lsp.zig");
 const main = @import("main.zig");
 const ter = @import("terminal.zig");
 const ts = @import("ts.zig");
-const dia = @import("ui/diagnostic.zig");
 const uni = @import("unicode.zig");
+const dia = @import("ui/diagnostic.zig");
+const fzf = @import("ui/fzf.zig");
 
 pub const Buffer = struct {
     path: []const u8,
@@ -341,7 +342,7 @@ pub const Buffer = struct {
         try self.pending_changes.append(try change.clone(self.allocator));
     }
 
-    pub fn commitChanges(self: *Buffer) FatalError!void {
+    pub fn commitChanges(self: *Buffer) !void {
         if (self.uncommitted_changes.items.len == 0) {
             log.debug(@This(), "no changes to commit\n", .{});
             return;
@@ -591,6 +592,27 @@ pub const Buffer = struct {
         }
     }
 
+    pub fn findSymbols(self: *Buffer) !void {
+        if (self.ts_state) |*ts_state| {
+            if (ts_state.symbol) |*parse_result| {
+                try parse_result.makeSpans(ts_state.tree.?);
+                for (parse_result.spans.items) |span| {
+                    const symbol_name = self.content_raw.items[span.start..span.end];
+                    log.debug(@This(), "symbol span: {s}\n", .{symbol_name});
+                }
+                const pick_result = fzf.pickSymbol(self.allocator, self, parse_result.spans.items) catch |e| {
+                    log.err(@This(), "{}\n", .{e});
+                    if (@errorReturnTrace()) |trace| std.debug.dumpStackTrace(trace.*);
+                    return;
+                };
+                defer self.allocator.free(pick_result.path);
+                log.debug(@This(), "picked symbol: {}\n", .{pick_result});
+                self.moveCursor(pick_result.position);
+                self.centerCursor();
+            }
+        }
+    }
+
     pub fn showHover(self: *Buffer) !void {
         for (self.lsp_connections.items) |conn| {
             try conn.hover();
@@ -835,6 +857,7 @@ pub const Buffer = struct {
         self.cursor = change.new_span.?.end;
 
         if (self.ts_state) |*ts_state| try ts_state.edit(change);
+        log.trace(@This(), "buf content after change: {any}\n", .{self.content.items});
     }
 
     /// Delete every character from cursor (including) to the end of line
@@ -872,6 +895,7 @@ pub const Buffer = struct {
         try uni.unicodeToBytesWrite(&writer.writer, self.content.items);
         self.content_raw.clearRetainingCapacity();
         try self.content_raw.appendSlice(writer.written());
+        log.info(@This(), "updated raw: {s}\n", .{self.content_raw.items});
     }
 
     fn scrollForCursor(self: *Buffer, new_buf_cursor: Cursor) void {
diff --git a/src/core.zig b/src/core.zig
index 880684d..5bfe4da 100644
--- a/src/core.zig
+++ b/src/core.zig
@@ -82,6 +82,11 @@ pub const ByteSpan = struct {
     start: usize,
     end: usize,
 
+    pub fn init(span: ByteSpan, capture_name: []const u8) ?ByteSpan {
+        if (!std.mem.eql(u8, capture_name, "name")) return null;
+        return span;
+    }
+
     pub fn fromBufSpan(buffer: *const buf.Buffer, span: Span) ByteSpan {
         return .{
             .start = buffer.cursorToBytePos(span.start),
diff --git a/src/editor.zig b/src/editor.zig
index 33b09f3..b0df7b4 100644
--- a/src/editor.zig
+++ b/src/editor.zig
@@ -150,7 +150,7 @@ pub const Editor = struct {
         main.editor.dirty.draw = true;
     }
 
-    pub fn enterMode(self: *Editor, mode: Mode) FatalError!void {
+    pub fn enterMode(self: *Editor, mode: Mode) !void {
         self.resetHover();
 
         if (self.mode == mode) return;
@@ -258,11 +258,10 @@ pub const Editor = struct {
                         try conn.disconnect();
                     },
                     .Disconnecting => {
-                        if (conn.exitCode()) |code| {
-                            log.info(@This(), "lsp server terminated with code: {}\n", .{code});
+                        const term = std.posix.waitpid(conn.child.id, std.posix.W.NOHANG);
+                        if (conn.child.id == term.pid) {
+                            log.info(@This(), "lsp server terminated with code: {}\n", .{std.posix.W.EXITSTATUS(term.status)});
                             conn.status = .Closed;
-                        } else {
-                            log.trace(@This(), "waiting for lsp server termination: {s}\n", .{conn.config.name});
                         }
                     },
                     .Closed => {
diff --git a/src/file_type.zig b/src/file_type.zig
index f166cf9..14329fd 100644
--- a/src/file_type.zig
+++ b/src/file_type.zig
@@ -7,7 +7,9 @@ const log = @import("log.zig");
 const main = @import("main.zig");
 const ts = @import("ts.zig");
 
-const nvim_ts_path = "$HOME/.local/share/nvim/lazy/nvim-treesitter";
+const nvim_runtime_path = "$HOME/.local/share/nvim";
+const nvim_ts_path = nvim_runtime_path ++ "/lazy/nvim-treesitter";
+const nvim_aerial_path = nvim_runtime_path ++ "/lazy/aerial.nvim";
 
 pub const FileTypeConfig = struct {
     name: []const u8,
@@ -20,6 +22,7 @@ pub const TsConfig = struct {
     lib_symbol: []const u8,
     highlight_query: []const u8,
     indent_query: []const u8,
+    symbol_query: ?[]const u8,
 
     pub fn from_nvim(comptime name: []const u8) TsConfig {
         return .{
@@ -27,6 +30,7 @@ pub const TsConfig = struct {
             .lib_symbol = "tree_sitter_" ++ name,
             .highlight_query = highlight_query_from_nvim(name),
             .indent_query = indent_query_from_nvim(name),
+            .symbol_query = symbol_query_from_aerial(name),
         };
     }
 
@@ -58,6 +62,10 @@ pub const TsConfig = struct {
     pub fn indent_query_from_nvim(comptime name: []const u8) []const u8 {
         return nvim_ts_path ++ "/queries/" ++ name ++ "/indents.scm";
     }
+
+    pub fn symbol_query_from_aerial(comptime name: []const u8) []const u8 {
+        return nvim_aerial_path ++ "/queries/" ++ name ++ "/aerial.scm";
+    }
 };
 
 pub const plain: FileTypeConfig = .{ .name = "plain", .ts = null };
@@ -74,6 +82,7 @@ pub const file_type = std.StaticStringMap(FileTypeConfig).initComptime(.{
             .lib_symbol = "tree_sitter_typescript",
             .highlight_query = TsConfig.highlight_query_from_nvim("ecma"),
             .indent_query = TsConfig.highlight_query_from_nvim("ecma"),
+            .symbol_query = TsConfig.symbol_query_from_aerial("typescript"),
         },
     } },
     .{ ".zig", FileTypeConfig{
diff --git a/src/lsp.zig b/src/lsp.zig
index 1ff7f63..d319506 100644
--- a/src/lsp.zig
+++ b/src/lsp.zig
@@ -73,8 +73,6 @@ pub const LspConnection = struct {
     thread: std.Thread,
     client_capabilities: types.ClientCapabilities,
     server_init: ?std.json.Parsed(types.InitializeResult) = null,
-    stdin_buf: [2 << 12]u8 = undefined,
-    stdin_writer: std.fs.File.Writer,
     allocator: Allocator,
 
     pub fn connect(allocator: Allocator, config: LspConfig) !LspConnection {
@@ -122,10 +120,8 @@ pub const LspConnection = struct {
             .buffers = std.array_list.Managed(*buf.Buffer).init(allocator),
             .thread = undefined,
             .client_capabilities = client_capabilities,
-            .stdin_writer = undefined,
             .allocator = allocator,
         };
-        self.stdin_writer = child.stdin.?.writer(&self.stdin_buf);
 
         const cwd = try std.fs.cwd().realpathAlloc(allocator, ".");
         defer allocator.free(cwd);
@@ -177,8 +173,7 @@ pub const LspConnection = struct {
 
                     const response_result = b: switch (resp.result_or_error) {
                         .@"error" => {
-                            const e = resp.result_or_error.@"error";
-                            log.debug(@This(), "LSP error: {} {s}\n", .{ e.code, e.message });
+                            log.debug(@This(), "Lsp error: {}\n", .{resp.result_or_error.@"error"});
                             return;
                         },
                         .result => |r| break :b r,
@@ -291,12 +286,13 @@ pub const LspConnection = struct {
             var changes = try std.array_list.Managed(types.TextDocumentContentChangeEvent)
                 .initCapacity(self.allocator, buffer.pending_changes.items.len);
             defer changes.deinit();
-
             for (buffer.pending_changes.items) |change| {
                 const event = try change.toLsp(self.allocator);
-                log.info(@This(), "change new text: {?any}\n", .{change.new_text});
                 try changes.append(event);
             }
+            defer for (changes.items) |event| {
+                self.allocator.free(event.literal_0.text);
+            };
             try self.sendNotification("textDocument/didChange", .{
                 .textDocument = .{ .uri = buffer.uri, .version = @intCast(buffer.version) },
                 .contentChanges = changes.items,
@@ -313,21 +309,7 @@ pub const LspConnection = struct {
         });
     }
 
-    pub fn exitCode(self: *LspConnection) ?u8 {
-        const term = std.posix.waitpid(self.child.id, std.posix.W.NOHANG);
-        if (self.child.id == term.pid) return std.posix.W.EXITSTATUS(term.status);
-        return null;
-    }
-
     fn poll(self: *LspConnection) !?[]const []const u8 {
-        if (self.status == .Created or self.status == .Initialized) {
-            if (self.exitCode()) |code| {
-                log.err(@This(), "lsp server terminated prematurely with code: {}\n", .{code});
-                self.status = .Closed;
-                return error.ServerCrash;
-            }
-        }
-
         if (log.enabled(.@"error")) b: {
             var err_writer = std.io.Writer.Allocating.init(self.allocator);
             defer err_writer.deinit();
@@ -389,9 +371,9 @@ pub const LspConnection = struct {
         };
         const json_message = try std.json.Stringify.valueAlloc(self.allocator, request, default_stringify_opts);
         log.trace(@This(), "> raw request: {s}\n", .{json_message});
-        try self.stdin_writer.interface.print("Content-Length: {}\r\n\r\n{s}", .{ json_message.len, json_message });
-        try self.stdin_writer.interface.flush();
-
+        const rpc_message = try std.fmt.allocPrint(self.allocator, "Content-Length: {}\r\n\r\n{s}", .{ json_message.len, json_message });
+        _ = try self.child.stdin.?.write(rpc_message);
+        defer self.allocator.free(rpc_message);
         try self.messages_unreplied.put(request.id.number, .{ .method = method, .message = json_message });
     }
 
@@ -407,8 +389,9 @@ pub const LspConnection = struct {
         const json_message = try std.json.Stringify.valueAlloc(self.allocator, request, default_stringify_opts);
         defer self.allocator.free(json_message);
         log.trace(@This(), "> raw notification: {s}\n", .{json_message});
-        try self.stdin_writer.interface.print("Content-Length: {}\r\n\r\n{s}", .{ json_message.len, json_message });
-        try self.stdin_writer.interface.flush();
+        const rpc_message = try std.fmt.allocPrint(self.allocator, "Content-Length: {}\r\n\r\n{s}", .{ json_message.len, json_message });
+        _ = try self.child.stdin.?.write(rpc_message);
+        defer self.allocator.free(rpc_message);
     }
 
     fn sendResponse(
@@ -424,8 +407,9 @@ pub const LspConnection = struct {
         const json_message = try std.json.Stringify.valueAlloc(self.allocator, request, default_stringify_opts);
         defer self.allocator.free(json_message);
         log.trace(@This(), "> raw response: {s}\n", .{json_message});
-        try self.stdin_writer.interface.print("Content-Length: {}\r\n\r\n{s}", .{ json_message.len, json_message });
-        try self.stdin_writer.interface.flush();
+        const rpc_message = try std.fmt.allocPrint(self.allocator, "Content-Length: {}\r\n\r\n{s}", .{ json_message.len, json_message });
+        _ = try self.child.stdin.?.write(rpc_message);
+        defer self.allocator.free(rpc_message);
     }
 
     fn handleInitializeResponse(self: *LspConnection, arena: Allocator, resp: ?std.json.Value) !void {
diff --git a/src/main.zig b/src/main.zig
index d5e6c83..7f65796 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -165,7 +165,7 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                 // command line menu
                 if (cmd_active) {
                     if (eql(u8, key, "\n")) {
-                        editor.handleCmd() catch |e| log.err(@This(), "handle cmd error: {}\n", .{e});
+                        editor.handleCmd() catch |e| log.err(@This(), "handle cmd error: {}", .{e});
                     } else if (cmd_active and eql(u8, key, "<escape>")) {
                         editor.command_line.close();
                     } else if (cmd_active and eql(u8, key, "<left>")) {
@@ -223,7 +223,6 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
 
                     // normal or select mode
                 } else if (normal_or_select and eql(u8, key, "k")) {
-                    buffer.moveCursor(buffer.cursor.applyOffset(.{ .row = -1 * repeat_or_1 }));
                 } else if (normal_or_select and eql(u8, key, "j")) {
                     buffer.moveCursor(buffer.cursor.applyOffset(.{ .row = 1 * repeat_or_1 }));
                 } else if (normal_or_select and eql(u8, key, "h")) {
@@ -258,9 +257,9 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                     try buffer.changeAlignIndent();
                     try editor.enterMode(.normal);
                 } else if (normal_or_select and eql(u8, key, "y")) {
-                    buffer.copySelectionToClipboard() catch |e| log.err(@This(), "copy to clipboard error: {}\n", .{e});
+                    buffer.copySelectionToClipboard() catch |e| log.err(@This(), "copy to clipboard error: {}", .{e});
                 } else if (normal_or_select and eql(u8, key, "p")) {
-                    buffer.changeInsertFromClipboard() catch |e| log.err(@This(), "paste from clipboard error: {}\n", .{e});
+                    buffer.changeInsertFromClipboard() catch |e| log.err(@This(), "paste from clipboard error: {}", .{e});
                 } else if (normal_or_select and eql(u8, key, "z")) {
                     buffer.centerCursor();
                 } else if (normal_or_select and eql(u8, key, ":")) {
@@ -269,7 +268,7 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                     // normal mode
                 } else if (normal_or_select and (eql(u8, key, "q") or eql(u8, key, "Q"))) {
                     const force = eql(u8, key, "Q");
-                    editor.closeBuffer(force) catch |e| log.err(@This(), "close buffer error: {}\n", .{e});
+                    editor.closeBuffer(force) catch |e| log.err(@This(), "close buffer error: {}", .{e});
                     if (editor.buffers.items.len == 0) break :main_loop;
                 } else if (editor.mode == .normal and eql(u8, key, "v")) {
                     try editor.enterMode(.select);
@@ -288,7 +287,7 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                 } else if (editor.mode == .normal and eql(u8, key, "<tab>")) {
                     if (editor.buffers.items.len > 1) {
                         const path = editor.buffers.items[1].path;
-                        editor.openBuffer(path) catch |e| log.err(@This(), "open buffer {s} error: {}\n", .{ path, e });
+                        editor.openBuffer(path) catch |e| log.err(@This(), "open buffer {s} error: {}", .{ path, e });
                     }
                 } else if (editor.mode == .normal and eql(u8, key, ".")) {
                     try editor.dotRepeat();
@@ -305,16 +304,16 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                 } else if (editor.mode == .normal and eql(u8, key, "r") and editor.recording_macro != null) {
                     try editor.recordMacro();
                 } else if (editor.mode == .normal and eql(u8, key, "<c-n>")) {
-                    editor.pickFile() catch |e| log.err(@This(), "pick file error: {}\n", .{e});
+                    editor.pickFile() catch |e| log.err(@This(), "pick file error: {}", .{e});
                 } else if (editor.mode == .normal and eql(u8, key, "<c-f>")) {
-                    editor.findInFiles() catch |e| log.err(@This(), "find in files error: {}\n", .{e});
+                    editor.findInFiles() catch |e| log.err(@This(), "find in files error: {}", .{e});
                 } else if (editor.mode == .normal and eql(u8, key, "<c-e>")) {
-                    editor.pickBuffer() catch |e| log.err(@This(), "pick buffer error: {}\n", .{e});
+                    editor.pickBuffer() catch |e| log.err(@This(), "pick buffer error: {}", .{e});
                 } else if (editor.mode == .normal and eql(u8, key, "<K>")) {
                     if (editor.hover_contents) |hover| {
-                        editor.openScratch(hover) catch |e| log.err(@This(), "open scratch error: {}\n", .{e});
+                        editor.openScratch(hover) catch |e| log.err(@This(), "open scratch error: {}", .{e});
                     } else {
-                        buffer.showHover() catch |e| log.err(@This(), "show hover LSP error: {}\n", .{e});
+                        buffer.showHover() catch |e| log.err(@This(), "show hover LSP error: {}", .{e});
                     }
 
                     // insert mode
@@ -330,13 +329,15 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                     defer allocator.free(multi_key);
 
                     if (editor.mode == .normal and eql(u8, multi_key, " w")) {
-                        buffer.write() catch |e| log.err(@This(), "write buffer error: {}\n", .{e});
+                        buffer.write() catch |e| log.err(@This(), "write buffer error: {}", .{e});
                     } else if (editor.mode == .normal and eql(u8, multi_key, " d")) {
-                        buffer.goToDefinition() catch |e| log.err(@This(), "go to def LSP error: {}\n", .{e});
+                        buffer.goToDefinition() catch |e| log.err(@This(), "go to def LSP error: {}", .{e});
                     } else if (editor.mode == .normal and eql(u8, multi_key, " r")) {
-                        buffer.findReferences() catch |e| log.err(@This(), "find references LSP error: {}\n", .{e});
+                        buffer.findReferences() catch |e| log.err(@This(), "find references LSP error: {}", .{e});
                     } else if (editor.mode == .normal and eql(u8, multi_key, " n")) {
                         try buffer.renamePrompt();
+                    } else if (editor.mode == .normal and eql(u8, multi_key, " f")) {
+                        try buffer.findSymbols();
                     } else if (editor.mode == .normal and eql(u8, key, "r") and editor.key_queue.items[1].printable != null) {
                         const macro_name: u8 = @intCast(key2.printable.?[0]);
                         try editor.startMacro(macro_name);
@@ -392,9 +393,10 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
             buffer.version += 1;
             buffer.clearDiagnostics();
             try buffer.reparse();
+            log.trace(@This(), "buf raw content after reparse:\n{s}\n", .{buffer.content_raw.items});
             perf.parse = timer.lap();
             for (buffer.lsp_connections.items) |conn| {
-                conn.didChange(editor.active_buffer) catch |e| log.err(@This(), "did change LSP error: {}\n", .{e});
+                conn.didChange(editor.active_buffer) catch |e| log.err(@This(), "did change LSP error: {}", .{e});
             }
             for (buffer.pending_changes.items) |*change| change.deinit();
             buffer.pending_changes.clearRetainingCapacity();
@@ -406,17 +408,17 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
 
         if (editor.dirty.draw) {
             editor.dirty.draw = false;
-            term.draw() catch |e| log.err(@This(), "draw error: {}\n", .{e});
+            term.draw() catch |e| log.err(@This(), "draw error: {}", .{e});
         } else if (editor.dirty.cursor) {
             editor.dirty.cursor = false;
-            term.updateCursor() catch |e| log.err(@This(), "update cursor error: {}\n", .{e});
+            term.updateCursor() catch |e| log.err(@This(), "update cursor error: {}", .{e});
         }
         perf.draw = timer.lap();
 
         if (editor.dirty.completion) {
             editor.dirty.completion = false;
             for (buffer.lsp_connections.items) |conn| {
-                conn.sendCompletionRequest() catch |e| log.err(@This(), "cmp request LSP error: {}\n", .{e});
+                conn.sendCompletionRequest() catch |e| log.err(@This(), "cmp request LSP error: {}", .{e});
             }
         }
         if (editor.dot_repeat_state == .commit_ready) {
@@ -425,11 +427,11 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
         perf.commit = timer.lap();
 
         if (buffer.syncFs() catch |e| b: {
-            log.err(@This(), "sync fs error: {}\n", .{e});
+            log.err(@This(), "sync fs error: {}", .{e});
             break :b false;
         }) {
             try editor.sendMessage("external buffer modification");
-            buffer.changeFsExternal() catch |e| log.err(@This(), "external change fs error: {}\n", .{e});
+            buffer.changeFsExternal() catch |e| log.err(@This(), "external change fs error: {}", .{e});
         }
         perf.sync = timer.lap();
 
diff --git a/src/ts.zig b/src/ts.zig
index a66b222..99b1a74 100644
--- a/src/ts.zig
+++ b/src/ts.zig
@@ -72,6 +72,7 @@ pub const State = struct {
     tree: ?*ts.TSTree = null,
     highlight: ParseResult(AttrsSpan),
     indent: ParseResult(IndentSpanTuple),
+    symbol: ?ParseResult(ByteSpan) = null,
     allocator: Allocator,
 
     pub fn init(allocator: Allocator, ts_conf: ft.TsConfig) !State {
@@ -80,14 +81,18 @@ pub const State = struct {
         defer allocator.free(highlight_query);
         const indent_query = try ft.TsConfig.loadQuery(allocator, ts_conf.indent_query);
         defer allocator.free(indent_query);
+        const symbol_query = if (ts_conf.symbol_query) |sq| try ft.TsConfig.loadQuery(allocator, sq) else null;
+        defer if (symbol_query) |sq| allocator.free(sq);
 
-        const self = State{
+        var self = State{
             .parser = ts.ts_parser_new(),
             .allocator = allocator,
             .highlight = try ParseResult(AttrsSpan).init(allocator, language(), highlight_query),
             .indent = try ParseResult(IndentSpanTuple).init(allocator, language(), indent_query),
         };
+        if (symbol_query) |sq| self.symbol = try ParseResult(ByteSpan).init(allocator, language(), sq);
         _ = ts.ts_parser_set_language(self.parser, language());
+
         return self;
     }
 
@@ -115,6 +120,7 @@ pub const State = struct {
         if (self.tree) |t| ts.ts_tree_delete(t);
         self.highlight.deinit();
         self.indent.deinit();
+        if (self.symbol) |*s| s.deinit();
     }
 };
 
diff --git a/src/ui/fzf.zig b/src/ui/fzf.zig
index 39ce34f..6d4a983 100644
--- a/src/ui/fzf.zig
+++ b/src/ui/fzf.zig
@@ -5,6 +5,7 @@ const buf = @import("../buffer.zig");
 const col = @import("../color.zig");
 const core = @import("../core.zig");
 const Cursor = core.Cursor;
+const ByteSpan = core.ByteSpan;
 const ext = @import("../external.zig");
 const log = @import("../log.zig");
 const lsp = @import("../lsp.zig");
@@ -26,7 +27,7 @@ pub const FindResult = struct {
     position: Cursor,
 
     pub fn init(allocator: Allocator, fzf_out: []const u8) !FindResult {
-        var iter = std.mem.splitScalar(u8, fzf_out, ':');
+        var iter = std.mem.splitScalar(u8, std.mem.trimEnd(u8, fzf_out, "\n"), ':');
         return .{
             .path = try allocator.dupe(u8, iter.next().?),
             .position = .{
@@ -95,6 +96,36 @@ pub fn pickLspLocation(allocator: Allocator, locations: []const lsp.types.Locati
     return .init(allocator, out);
 }
 
+pub fn pickSymbol(allocator: Allocator, buffer: *const buf.Buffer, symbols: []const ByteSpan) !FindResult {
+    var lines = std.array_list.Managed(u8).init(allocator);
+    for (symbols) |symbol| {
+        const pos = buffer.posToCursor(symbol.start);
+        const symbol_name = buffer.content_raw.items[symbol.start..symbol.end];
+        const s = try std.fmt.allocPrint(
+            allocator,
+            "{s}:{}:{}\n",
+            .{ symbol_name, pos.row + 1, pos.col + 1 },
+        );
+        defer allocator.free(s);
+        try lines.appendSlice(s);
+    }
+    const bufs_str = try lines.toOwnedSlice();
+    defer allocator.free(bufs_str);
+
+    const preview_cmd = try std.fmt.allocPrint(
+        allocator,
+        "hat --printer --term-height=$FZF_PREVIEW_LINES --highlight-line={{2}} {s}",
+        .{buffer.path},
+    );
+    defer allocator.free(preview_cmd);
+
+    const cmd: []const []const u8 = fzf_command ++ .{ "--preview", preview_cmd, "--delimiter", ":" };
+    const out = try ext.runExternalWait(allocator, cmd, bufs_str, null);
+    defer allocator.free(out);
+    if (out.len == 0) return error.EmptyOut;
+    return .init(allocator, out);
+}
+
 const fzf_cmd_with_preview: []const []const u8 = fzf_command ++ .{
     "--preview",
     "hat --printer --term-height=$FZF_PREVIEW_LINES --highlight-line={2} {1}",
diff --git a/src/unicode.zig b/src/unicode.zig
index 6e7e6d5..1824b30 100644
--- a/src/unicode.zig
+++ b/src/unicode.zig
@@ -14,8 +14,9 @@ pub fn unicodeFromBytesArrayList(array: *std.array_list.Managed(u21), bytes: []c
 
 pub fn unicodeToBytes(allocator: Allocator, utf: []const u21) ![]const u8 {
     var writer = std.io.Writer.Allocating.init(allocator);
+    defer writer.deinit();
     try unicodeToBytesWrite(&writer.writer, utf);
-    return writer.toOwnedSlice();
+    return writer.written();
 }
 
 pub fn unicodeToBytesWrite(writer: *std.io.Writer, utf: []const u21) !void {
