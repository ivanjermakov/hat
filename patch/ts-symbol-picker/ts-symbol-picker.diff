diff --git a/src/buffer.zig b/src/buffer.zig
index f66ebf1..1f532c0 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -476,7 +476,7 @@ pub const Buffer = struct {
         main.editor.dirty.completion = true;
     }
 
-    pub fn commitChanges(self: *Buffer) FatalError!void {
+    pub fn commitChanges(self: *Buffer) !void {
         if (self.uncommitted_changes.items.len == 0) {
             log.debug(@This(), "no changes to commit\n", .{});
             return;
@@ -710,6 +710,27 @@ pub const Buffer = struct {
         return self.content_raw.items[bs.start..bs.end];
     }
 
+    pub fn findSymbols(self: *Buffer) !void {
+        if (self.ts_state) |*ts_state| {
+            if (ts_state.symbol) |*parse_result| {
+                try parse_result.makeSpans(ts_state.tree.?);
+                for (parse_result.spans.items) |span| {
+                    const symbol_name = self.content_raw.items[span.start..span.end];
+                    log.debug(@This(), "symbol span: {s}\n", .{symbol_name});
+                }
+                const pick_result = fzf.pickSymbol(self.allocator, self, parse_result.spans.items) catch |e| {
+                    log.err(@This(), "{}\n", .{e}, @errorReturnTrace());
+                    if (@errorReturnTrace()) |trace| log.errPrint("{f}\n", .{trace.*});
+                    return;
+                };
+                defer self.allocator.free(pick_result.path);
+                log.debug(@This(), "picked symbol: {}\n", .{pick_result});
+                self.moveCursor(pick_result.position);
+                self.centerCursor();
+            }
+        }
+    }
+
     pub fn renamePrompt(self: *Buffer) !void {
         const cmd = &main.editor.command_line;
         const line = self.lineContent(@intCast(self.cursor.row));
diff --git a/src/core.zig b/src/core.zig
index a09c2e0..12cc04c 100644
--- a/src/core.zig
+++ b/src/core.zig
@@ -88,6 +88,11 @@ pub const SpanFlat = struct {
     start: usize,
     end: usize,
 
+    pub fn init(span: SpanFlat, capture_name: []const u8) ?SpanFlat {
+        if (!std.mem.eql(u8, capture_name, "name")) return null;
+        return span;
+    }
+
     pub fn fromBufSpan(buffer: *const buf.Buffer, span: Span) SpanFlat {
         return .{
             .start = buffer.cursorToPos(span.start),
diff --git a/src/main.zig b/src/main.zig
index d117195..5bc6b0a 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -540,6 +540,8 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                         }
                     } else if (buffer.mode == .normal and eql(u8, multi_key, " n")) {
                         try buffer.renamePrompt();
+                    } else if (buffer.mode == .normal and eql(u8, multi_key, " f")) {
+                        try buffer.findSymbols();
                     } else if (buffer.mode == .normal and eql(u8, key, "r") and key2.printable != null) {
                         const macro_name: u8 = @intCast(key2.printable.?);
                         try editor.startMacro(macro_name);
diff --git a/src/ts.zig b/src/ts.zig
index a7de638..e36ae8e 100644
--- a/src/ts.zig
+++ b/src/ts.zig
@@ -101,6 +101,7 @@ pub const State = struct {
     tree: ?*ts.TSTree = null,
     highlight: ?ParseResult(AttrsSpan) = null,
     indent: ?Query = null,
+    symbol: ?ParseResult(SpanFlat) = null,
     allocator: Allocator,
 
     pub fn init(allocator: Allocator, ts_conf: ft.TsConfig) !State {
@@ -119,6 +120,10 @@ pub const State = struct {
         defer if (indent_query) |q| allocator.free(q);
         if (indent_query) |q| self.indent = try .init(allocator, language, q);
 
+        const symbol_query = if (ts_conf.symbol_query) |q| try ft.TsConfig.loadQuery(allocator, q) else null;
+        defer if (symbol_query) |q| allocator.free(q);
+        if (symbol_query) |q| self.symbol = try ParseResult(SpanFlat).init(allocator, language, q);
+
         _ = ts.ts_parser_set_language(self.parser, language);
 
         return self;
@@ -158,6 +163,7 @@ pub const State = struct {
         if (self.tree) |t| ts.ts_tree_delete(t);
         if (self.highlight) |*h| h.deinit();
         if (self.indent) |*i| i.deinit();
+        if (self.symbol) |*s| s.deinit();
     }
 };
 
diff --git a/src/ui/fzf.zig b/src/ui/fzf.zig
index 339dca8..26339b2 100644
--- a/src/ui/fzf.zig
+++ b/src/ui/fzf.zig
@@ -6,6 +6,7 @@ const col = @import("../color.zig");
 const Color = col.color;
 const core = @import("../core.zig");
 const Cursor = core.Cursor;
+const SpanFlat = core.SpanFlat;
 const ext = @import("../external.zig");
 const log = @import("../log.zig");
 const lsp = @import("../lsp.zig");
@@ -27,7 +28,7 @@ pub const FindResult = struct {
     position: Cursor,
 
     pub fn init(allocator: Allocator, fzf_out: []const u8) !FindResult {
-        var iter = std.mem.splitScalar(u8, fzf_out, ':');
+        var iter = std.mem.splitScalar(u8, std.mem.trimEnd(u8, fzf_out, "\n"), ':');
         return .{
             .path = try allocator.dupe(u8, iter.next().?),
             .position = .{
@@ -90,6 +91,32 @@ pub fn pickLspLocation(allocator: Allocator, locations: []const lsp.types.Locati
     return .init(allocator, out);
 }
 
+pub fn pickSymbol(allocator: Allocator, buffer: *const buf.Buffer, symbols: []const SpanFlat) !FindResult {
+    var lines: std.io.Writer.Allocating = .init(allocator);
+    defer lines.deinit();
+    for (symbols) |symbol| {
+        const pos = buffer.posToCursor(symbol.start);
+        const symbol_name = buffer.content_raw.items[symbol.start..symbol.end];
+        try lines.writer.print(
+            "{s}:{}:{}\n",
+            .{ symbol_name, pos.row + 1, pos.col + 1 },
+        );
+    }
+
+    const preview_cmd = try std.fmt.allocPrint(
+        allocator,
+        "hat --printer --term-height=$FZF_PREVIEW_LINES --highlight-line={{2}} {s}",
+        .{buffer.path},
+    );
+    defer allocator.free(preview_cmd);
+
+    const cmd: []const []const u8 = fzf_command ++ .{ "--preview", preview_cmd, "--delimiter", ":" };
+    const out = try ext.runExternalWait(allocator, cmd, .{ .input = lines.written() });
+    defer allocator.free(out);
+    if (out.len == 0) return error.EmptyOut;
+    return .init(allocator, out);
+}
+
 const fzf_cmd_with_preview: []const []const u8 = fzf_command ++ .{
     "--preview",
     "hat --printer --term-height=$FZF_PREVIEW_LINES --highlight-line={2} {1}",
