diff --git a/src/buffer.zig b/src/buffer.zig
index ea5bb1c..d0805a1 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -23,8 +23,9 @@ const lsp = @import("lsp.zig");
 const main = @import("main.zig");
 const ter = @import("terminal.zig");
 const ts = @import("ts.zig");
-const dia = @import("ui/diagnostic.zig");
 const uni = @import("unicode.zig");
+const dia = @import("ui/diagnostic.zig");
+const fzf = @import("ui/fzf.zig");
 
 pub const Buffer = struct {
     path: []const u8,
@@ -66,6 +67,7 @@ pub const Buffer = struct {
     uncommitted_changes: std.array_list.Managed(cha.Change),
     lsp_connections: std.array_list.Managed(*lsp.LspConnection),
     scratch: bool = false,
+    highlights: std.array_list.Managed(Span),
     allocator: Allocator,
 
     pub fn init(allocator: Allocator, path: ?[]const u8, content_raw: []const u8) !Buffer {
@@ -97,6 +99,7 @@ pub const Buffer = struct {
             .uncommitted_changes = std.array_list.Managed(cha.Change).init(allocator),
             .lsp_connections = std.array_list.Managed(*lsp.LspConnection).init(allocator),
             .scratch = scratch,
+            .highlights = std.array_list.Managed(Span).init(allocator),
             .allocator = allocator,
         };
         _ = try self.syncFs();
@@ -143,6 +146,7 @@ pub const Buffer = struct {
         self.line_positions.deinit();
         self.line_byte_positions.deinit();
         self.indents.deinit();
+        self.highlights.deinit();
 
         for (self.history.items) |*i| {
             for (i.items) |*c| c.deinit();
@@ -341,7 +345,7 @@ pub const Buffer = struct {
         try self.pending_changes.append(try change.clone(self.allocator));
     }
 
-    pub fn commitChanges(self: *Buffer) FatalError!void {
+    pub fn commitChanges(self: *Buffer) !void {
         if (self.uncommitted_changes.items.len == 0) {
             log.debug(@This(), "no changes to commit\n", .{});
             return;
@@ -591,12 +595,39 @@ pub const Buffer = struct {
         }
     }
 
+    pub fn findSymbols(self: *Buffer) !void {
+        if (self.ts_state) |*ts_state| {
+            if (ts_state.symbol) |*parse_result| {
+                try parse_result.makeSpans(ts_state.tree.?);
+                for (parse_result.spans.items) |span| {
+                    const symbol_name = self.content_raw.items[span.start..span.end];
+                    log.debug(@This(), "symbol span: {s}\n", .{symbol_name});
+                }
+                const pick_result = fzf.pickSymbol(self.allocator, self, parse_result.spans.items) catch |e| {
+                    log.err(@This(), "{}\n", .{e});
+                    if (@errorReturnTrace()) |trace| std.debug.dumpStackTrace(trace.*);
+                    return;
+                };
+                defer self.allocator.free(pick_result.path);
+                log.debug(@This(), "picked symbol: {}\n", .{pick_result});
+                self.moveCursor(pick_result.position);
+                self.centerCursor();
+            }
+        }
+    }
+
     pub fn showHover(self: *Buffer) !void {
         for (self.lsp_connections.items) |conn| {
             try conn.hover();
         }
     }
 
+    pub fn highlight(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.highlight();
+        }
+    }
+
     pub fn renamePrompt(self: *Buffer) !void {
         const cmd = &main.editor.command_line;
         const line = self.lineContent(@intCast(self.cursor.row));
diff --git a/src/color.zig b/src/color.zig
index 4bbebcd..1221fc4 100644
--- a/src/color.zig
+++ b/src/color.zig
@@ -82,6 +82,7 @@ pub const Attr = union(enum) {
 pub const attributes = enum {
     pub const text = &[_]Attr{.{ .fg = color.white }};
     pub const selection = &[_]Attr{.{ .bg = color.gray3 }};
+    pub const highlight = &[_]Attr{.{ .bg = color.gray3 }};
     pub const keyword = &[_]Attr{.{ .fg = color.magenta }};
     pub const string = &[_]Attr{.{ .fg = color.green }};
     pub const literal = &[_]Attr{.{ .fg = color.yellow }};
diff --git a/src/core.zig b/src/core.zig
index 880684d..5bfe4da 100644
--- a/src/core.zig
+++ b/src/core.zig
@@ -82,6 +82,11 @@ pub const ByteSpan = struct {
     start: usize,
     end: usize,
 
+    pub fn init(span: ByteSpan, capture_name: []const u8) ?ByteSpan {
+        if (!std.mem.eql(u8, capture_name, "name")) return null;
+        return span;
+    }
+
     pub fn fromBufSpan(buffer: *const buf.Buffer, span: Span) ByteSpan {
         return .{
             .start = buffer.cursorToBytePos(span.start),
diff --git a/src/editor.zig b/src/editor.zig
index 33b09f3..ac5a9af 100644
--- a/src/editor.zig
+++ b/src/editor.zig
@@ -150,7 +150,7 @@ pub const Editor = struct {
         main.editor.dirty.draw = true;
     }
 
-    pub fn enterMode(self: *Editor, mode: Mode) FatalError!void {
+    pub fn enterMode(self: *Editor, mode: Mode) !void {
         self.resetHover();
 
         if (self.mode == mode) return;
diff --git a/src/file_type.zig b/src/file_type.zig
index f166cf9..14329fd 100644
--- a/src/file_type.zig
+++ b/src/file_type.zig
@@ -7,7 +7,9 @@ const log = @import("log.zig");
 const main = @import("main.zig");
 const ts = @import("ts.zig");
 
-const nvim_ts_path = "$HOME/.local/share/nvim/lazy/nvim-treesitter";
+const nvim_runtime_path = "$HOME/.local/share/nvim";
+const nvim_ts_path = nvim_runtime_path ++ "/lazy/nvim-treesitter";
+const nvim_aerial_path = nvim_runtime_path ++ "/lazy/aerial.nvim";
 
 pub const FileTypeConfig = struct {
     name: []const u8,
@@ -20,6 +22,7 @@ pub const TsConfig = struct {
     lib_symbol: []const u8,
     highlight_query: []const u8,
     indent_query: []const u8,
+    symbol_query: ?[]const u8,
 
     pub fn from_nvim(comptime name: []const u8) TsConfig {
         return .{
@@ -27,6 +30,7 @@ pub const TsConfig = struct {
             .lib_symbol = "tree_sitter_" ++ name,
             .highlight_query = highlight_query_from_nvim(name),
             .indent_query = indent_query_from_nvim(name),
+            .symbol_query = symbol_query_from_aerial(name),
         };
     }
 
@@ -58,6 +62,10 @@ pub const TsConfig = struct {
     pub fn indent_query_from_nvim(comptime name: []const u8) []const u8 {
         return nvim_ts_path ++ "/queries/" ++ name ++ "/indents.scm";
     }
+
+    pub fn symbol_query_from_aerial(comptime name: []const u8) []const u8 {
+        return nvim_aerial_path ++ "/queries/" ++ name ++ "/aerial.scm";
+    }
 };
 
 pub const plain: FileTypeConfig = .{ .name = "plain", .ts = null };
@@ -74,6 +82,7 @@ pub const file_type = std.StaticStringMap(FileTypeConfig).initComptime(.{
             .lib_symbol = "tree_sitter_typescript",
             .highlight_query = TsConfig.highlight_query_from_nvim("ecma"),
             .indent_query = TsConfig.highlight_query_from_nvim("ecma"),
+            .symbol_query = TsConfig.symbol_query_from_aerial("typescript"),
         },
     } },
     .{ ".zig", FileTypeConfig{
diff --git a/src/lsp.zig b/src/lsp.zig
index 1ff7f63..c3dbf4e 100644
--- a/src/lsp.zig
+++ b/src/lsp.zig
@@ -9,6 +9,7 @@ const buf = @import("buffer.zig");
 const cha = @import("change.zig");
 const core = @import("core.zig");
 const Cursor = core.Cursor;
+const Span = core.Span;
 const fs = @import("fs.zig");
 const log = @import("log.zig");
 const main = @import("main.zig");
@@ -106,6 +107,7 @@ pub const LspConnection = struct {
                 .rename = .{
                     .prepareSupport = true,
                 },
+                .documentHighlight = .{},
             },
             .workspace = .{
                 .workspaceFolders = true,
@@ -200,6 +202,8 @@ pub const LspConnection = struct {
                         try self.handleHoverResponse(arena.allocator(), response_result);
                     } else if (std.mem.eql(u8, method, "textDocument/rename")) {
                         try self.handleRenameResponse(arena.allocator(), response_result);
+                    } else if (std.mem.eql(u8, method, "textDocument/documentHighlight")) {
+                        try self.handleHighlightResponse(arena.allocator(), response_result);
                     }
                 },
                 .notification => |notif| {
@@ -251,6 +255,14 @@ pub const LspConnection = struct {
         });
     }
 
+    pub fn highlight(self: *LspConnection) !void {
+        const buffer = main.editor.active_buffer;
+        try self.sendRequest("textDocument/documentHighlight", .{
+            .textDocument = .{ .uri = buffer.uri },
+            .position = buffer.cursor.toLsp(),
+        });
+    }
+
     pub fn rename(self: *LspConnection, new_name: []const u8) !void {
         if ((self.server_init orelse return).value.capabilities.renameProvider == null) return;
         const buffer = main.editor.active_buffer;
@@ -534,6 +546,21 @@ pub const LspConnection = struct {
         try main.editor.applyWorkspaceEdit(result.value);
     }
 
+    fn handleHighlightResponse(self: *LspConnection, arena: Allocator, resp: ?std.json.Value) !void {
+        _ = self;
+        if (resp == null or resp.? == .null) return;
+        const result = try std.json.parseFromValue([]const types.DocumentHighlight, arena, resp.?, .{});
+        const buffer = main.editor.active_buffer;
+        buffer.highlights.clearRetainingCapacity();
+        for (result.value) |hi| {
+            try buffer.highlights.append(Span.fromLsp(hi.range));
+        }
+        if (buffer.highlights.items.len > 0) {
+            log.debug(@This(), "got {} highlights\n", .{buffer.highlights.items.len});
+            main.editor.dirty.draw = true;
+        }
+    }
+
     fn handleNotification(self: *LspConnection, arena: Allocator, notif: lsp.JsonRPCMessage.Notification) !void {
         _ = self;
         log.trace(@This(), "notification: {s}\n", .{notif.method});
diff --git a/src/main.zig b/src/main.zig
index 34ec556..5a52ff4 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -228,9 +228,7 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                     std.posix.raise(sig.sig_handle.tstp.sig) catch {};
 
                     // normal or select mode
-                } else if (normal_or_select and eql(u8, key, "k")) {
-                    buffer.moveCursor(buffer.cursor.applyOffset(.{ .row = -1 * repeat_or_1 }));
-                } else if (normal_or_select and eql(u8, key, "j")) {
+                } else if (normal_or_select and eql(u8, key, "k")) {} else if (normal_or_select and eql(u8, key, "j")) {
                     buffer.moveCursor(buffer.cursor.applyOffset(.{ .row = 1 * repeat_or_1 }));
                 } else if (normal_or_select and eql(u8, key, "h")) {
                     buffer.moveCursor(buffer.cursor.applyOffset(.{ .col = -1 * repeat_or_1 }));
@@ -343,6 +341,8 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                         buffer.findReferences() catch |e| log.err(@This(), "find references LSP error: {}\n", .{e});
                     } else if (editor.mode == .normal and eql(u8, multi_key, " n")) {
                         try buffer.renamePrompt();
+                    } else if (editor.mode == .normal and eql(u8, multi_key, " f")) {
+                        try buffer.findSymbols();
                     } else if (editor.mode == .normal and eql(u8, key, "r") and editor.key_queue.items[1].printable != null) {
                         const macro_name: u8 = @intCast(key2.printable.?[0]);
                         try editor.startMacro(macro_name);
@@ -416,6 +416,13 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
         } else if (editor.dirty.cursor) {
             editor.dirty.cursor = false;
             term.updateCursor() catch |e| log.err(@This(), "update cursor error: {}\n", .{e});
+
+            if (buffer.highlights.items.len > 0) {
+                buffer.highlights.clearRetainingCapacity();
+                // redraw next frame to clear invalid highlights
+                editor.dirty.draw = true;
+            }
+            buffer.highlight() catch |e| log.err(@This(), "highlight LSP error: {}", .{e});
         }
         perf.draw = timer.lap();
 
diff --git a/src/terminal.zig b/src/terminal.zig
index 431a217..4614191 100644
--- a/src/terminal.zig
+++ b/src/terminal.zig
@@ -211,6 +211,14 @@ pub const Terminal = struct {
                     }
                 }
 
+                if (main.editor.mode == .normal) {
+                    for (buffer.highlights.items) |hi| {
+                        if (hi.inRange(.{ .row = buffer_row, .col = buffer_col })) {
+                            try co.attributes.write(co.attributes.highlight, &attrs_writer);
+                        }
+                    }
+                }
+
                 if (buffer.diagnostics.items.len > 0) {
                     for (buffer.diagnostics.items) |diagnostic| {
                         const span = diagnostic.span;
diff --git a/src/ts.zig b/src/ts.zig
index a66b222..99b1a74 100644
--- a/src/ts.zig
+++ b/src/ts.zig
@@ -72,6 +72,7 @@ pub const State = struct {
     tree: ?*ts.TSTree = null,
     highlight: ParseResult(AttrsSpan),
     indent: ParseResult(IndentSpanTuple),
+    symbol: ?ParseResult(ByteSpan) = null,
     allocator: Allocator,
 
     pub fn init(allocator: Allocator, ts_conf: ft.TsConfig) !State {
@@ -80,14 +81,18 @@ pub const State = struct {
         defer allocator.free(highlight_query);
         const indent_query = try ft.TsConfig.loadQuery(allocator, ts_conf.indent_query);
         defer allocator.free(indent_query);
+        const symbol_query = if (ts_conf.symbol_query) |sq| try ft.TsConfig.loadQuery(allocator, sq) else null;
+        defer if (symbol_query) |sq| allocator.free(sq);
 
-        const self = State{
+        var self = State{
             .parser = ts.ts_parser_new(),
             .allocator = allocator,
             .highlight = try ParseResult(AttrsSpan).init(allocator, language(), highlight_query),
             .indent = try ParseResult(IndentSpanTuple).init(allocator, language(), indent_query),
         };
+        if (symbol_query) |sq| self.symbol = try ParseResult(ByteSpan).init(allocator, language(), sq);
         _ = ts.ts_parser_set_language(self.parser, language());
+
         return self;
     }
 
@@ -115,6 +120,7 @@ pub const State = struct {
         if (self.tree) |t| ts.ts_tree_delete(t);
         self.highlight.deinit();
         self.indent.deinit();
+        if (self.symbol) |*s| s.deinit();
     }
 };
 
diff --git a/src/ui/fzf.zig b/src/ui/fzf.zig
index 39ce34f..6d4a983 100644
--- a/src/ui/fzf.zig
+++ b/src/ui/fzf.zig
@@ -5,6 +5,7 @@ const buf = @import("../buffer.zig");
 const col = @import("../color.zig");
 const core = @import("../core.zig");
 const Cursor = core.Cursor;
+const ByteSpan = core.ByteSpan;
 const ext = @import("../external.zig");
 const log = @import("../log.zig");
 const lsp = @import("../lsp.zig");
@@ -26,7 +27,7 @@ pub const FindResult = struct {
     position: Cursor,
 
     pub fn init(allocator: Allocator, fzf_out: []const u8) !FindResult {
-        var iter = std.mem.splitScalar(u8, fzf_out, ':');
+        var iter = std.mem.splitScalar(u8, std.mem.trimEnd(u8, fzf_out, "\n"), ':');
         return .{
             .path = try allocator.dupe(u8, iter.next().?),
             .position = .{
@@ -95,6 +96,36 @@ pub fn pickLspLocation(allocator: Allocator, locations: []const lsp.types.Locati
     return .init(allocator, out);
 }
 
+pub fn pickSymbol(allocator: Allocator, buffer: *const buf.Buffer, symbols: []const ByteSpan) !FindResult {
+    var lines = std.array_list.Managed(u8).init(allocator);
+    for (symbols) |symbol| {
+        const pos = buffer.posToCursor(symbol.start);
+        const symbol_name = buffer.content_raw.items[symbol.start..symbol.end];
+        const s = try std.fmt.allocPrint(
+            allocator,
+            "{s}:{}:{}\n",
+            .{ symbol_name, pos.row + 1, pos.col + 1 },
+        );
+        defer allocator.free(s);
+        try lines.appendSlice(s);
+    }
+    const bufs_str = try lines.toOwnedSlice();
+    defer allocator.free(bufs_str);
+
+    const preview_cmd = try std.fmt.allocPrint(
+        allocator,
+        "hat --printer --term-height=$FZF_PREVIEW_LINES --highlight-line={{2}} {s}",
+        .{buffer.path},
+    );
+    defer allocator.free(preview_cmd);
+
+    const cmd: []const []const u8 = fzf_command ++ .{ "--preview", preview_cmd, "--delimiter", ":" };
+    const out = try ext.runExternalWait(allocator, cmd, bufs_str, null);
+    defer allocator.free(out);
+    if (out.len == 0) return error.EmptyOut;
+    return .init(allocator, out);
+}
+
 const fzf_cmd_with_preview: []const []const u8 = fzf_command ++ .{
     "--preview",
     "hat --printer --term-height=$FZF_PREVIEW_LINES --highlight-line={2} {1}",
