diff --git a/src/buffer.zig b/src/buffer.zig
index 0f31b8e..6980b94 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -675,6 +675,12 @@ pub const Buffer = struct {
         try self.commitChanges();
     }
 
+    pub fn format(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.format();
+        }
+    }
+
     pub fn copySelectionToClipboard(self: *Buffer) !void {
         if (self.selection) |selection| {
             try clp.write(self.allocator, self.rawTextAt(selection));
diff --git a/src/lsp.zig b/src/lsp.zig
index 015292e..afe4d96 100644
--- a/src/lsp.zig
+++ b/src/lsp.zig
@@ -93,6 +93,7 @@ pub const LspConnection = struct {
                 .rename = .{
                     .prepareSupport = true,
                 },
+                .formatting = .{},
             },
             .workspace = .{
                 .workspaceFolders = true,
@@ -185,6 +186,8 @@ pub const LspConnection = struct {
                         try self.handleHoverResponse(arena.allocator(), response_result);
                     } else if (std.mem.eql(u8, method, "textDocument/rename")) {
                         try self.handleRenameResponse(arena.allocator(), response_result);
+                    } else if (std.mem.eql(u8, method, "textDocument/formatting")) {
+                        try self.handleFormattingResponse(arena.allocator(), response_result);
                     }
                 },
                 .notification => |notif| {
@@ -236,6 +239,18 @@ pub const LspConnection = struct {
         });
     }
 
+    pub fn format(self: *LspConnection) !void {
+        const buffer = main.editor.active_buffer;
+        try self.sendRequest("textDocument/formatting", .{
+            .textDocument = .{ .uri = buffer.uri },
+            .options = .{
+                .tabSize = 4,
+                .insertSpaces = true,
+                .trimTrailingWhitespace = true,
+            },
+        });
+    }
+
     pub fn rename(self: *LspConnection, new_name: []const u8) !void {
         if ((self.server_init orelse return).value.capabilities.renameProvider == null) return;
         const buffer = main.editor.active_buffer;
@@ -521,6 +536,20 @@ pub const LspConnection = struct {
         try main.editor.applyWorkspaceEdit(result.value);
     }
 
+    fn handleFormattingResponse(self: *LspConnection, arena: Allocator, resp: ?std.json.Value) !void {
+        _ = self;
+        if (resp == null or resp.? == .null) return;
+        const result = try std.json.parseFromValue([]const types.TextEdit, arena, resp.?, .{});
+        log.debug(@This(), "got {} formatting edits\n", .{result.value.len});
+        {
+            main.main_loop_mutex.lock();
+            defer main.main_loop_mutex.unlock();
+            const buffer = main.editor.active_buffer;
+            try buffer.applyTextEdits(result.value);
+            try buffer.commitChanges();
+        }
+    }
+
     fn handleNotification(self: *LspConnection, arena: Allocator, notif: lsp.JsonRPCMessage.Notification) !void {
         log.trace(@This(), "notification: {s}\n", .{notif.method});
         if (std.mem.eql(u8, notif.method, "window/logMessage")) {
diff --git a/src/main.zig b/src/main.zig
index 066118d..af90642 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -438,6 +438,8 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                         }
                     } else if (buffer.mode == .normal and eql(u8, multi_key, " n")) {
                         try buffer.renamePrompt();
+                    } else if (buffer.mode == .normal and eql(u8, multi_key, " l")) {
+                        buffer.format() catch |e| log.err(@This(), "format LSP error: {}", .{e});
                     } else if (buffer.mode == .normal and eql(u8, key, "r") and key2.printable != null) {
                         const macro_name: u8 = @intCast(key2.printable.?);
                         try editor.startMacro(macro_name);
