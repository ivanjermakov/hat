diff --git a/src/buffer.zig b/src/buffer.zig
index 70ee73d..de06627 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -347,7 +347,7 @@ pub const Buffer = struct {
         try self.pending_changes.append(try change.clone(self.allocator));
     }
 
-    pub fn commitChanges(self: *Buffer) FatalError!void {
+    pub fn commitChanges(self: *Buffer) !void {
         if (self.uncommitted_changes.items.len == 0) {
             log.debug(@This(), "no changes to commit\n", .{});
             return;
@@ -673,6 +673,12 @@ pub const Buffer = struct {
         try self.commitChanges();
     }
 
+    pub fn format(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.format();
+        }
+    }
+
     pub fn copySelectionToClipboard(self: *Buffer) !void {
         if (self.selection) |selection| {
             try clp.write(self.allocator, self.rawTextAt(selection));
diff --git a/src/editor.zig b/src/editor.zig
index fd3655c..0bdd9c0 100644
--- a/src/editor.zig
+++ b/src/editor.zig
@@ -151,7 +151,7 @@ pub const Editor = struct {
         main.editor.dirty.draw = true;
     }
 
-    pub fn enterMode(self: *Editor, mode: Mode) FatalError!void {
+    pub fn enterMode(self: *Editor, mode: Mode) !void {
         self.resetHover();
 
         if (self.mode == mode) return;
diff --git a/src/lsp.zig b/src/lsp.zig
index 8ed46b8..d58cdbe 100644
--- a/src/lsp.zig
+++ b/src/lsp.zig
@@ -119,6 +119,7 @@ pub const LspConnection = struct {
                     .rename = .{
                         .prepareSupport = true,
                     },
+                    .formatting = .{},
                 },
                 .workspace = .{
                     .workspaceFolders = true,
@@ -190,6 +191,8 @@ pub const LspConnection = struct {
                         try self.handleHoverResponse(arena.allocator(), response_result);
                     } else if (std.mem.eql(u8, method, "textDocument/rename")) {
                         try self.handleRenameResponse(arena.allocator(), response_result);
+                    } else if (std.mem.eql(u8, method, "textDocument/formatting")) {
+                        try self.handleFormattingResponse(arena.allocator(), response_result);
                     }
                 },
                 .notification => |notif| {
@@ -236,6 +239,18 @@ pub const LspConnection = struct {
         });
     }
 
+    pub fn format(self: *LspConnection) !void {
+        const buffer = main.editor.active_buffer;
+        try self.sendRequest("textDocument/formatting", .{
+            .textDocument = .{ .uri = buffer.uri },
+            .options = .{
+                .tabSize = 4,
+                .insertSpaces = true,
+                .trimTrailingWhitespace = true,
+            },
+        });
+    }
+
     pub fn rename(self: *LspConnection, new_name: []const u8) !void {
         const buffer = main.editor.active_buffer;
         try self.sendRequest("textDocument/rename", .{
@@ -513,6 +528,20 @@ pub const LspConnection = struct {
         try main.editor.applyWorkspaceEdit(result.value);
     }
 
+    fn handleFormattingResponse(self: *LspConnection, arena: Allocator, resp: ?std.json.Value) !void {
+        _ = self;
+        if (resp == null or resp.? == .null) return;
+        const result = try std.json.parseFromValue([]const types.TextEdit, arena, resp.?, .{});
+        log.debug(@This(), "got {} formatting edits\n", .{result.value.len});
+        {
+            main.main_loop_mutex.lock();
+            defer main.main_loop_mutex.unlock();
+            const buffer = main.editor.active_buffer;
+            try buffer.applyTextEdits(result.value);
+            try buffer.commitChanges();
+        }
+    }
+
     fn handleNotification(self: *LspConnection, arena: Allocator, notif: lsp.JsonRPCMessage.Notification) !void {
         _ = self;
         // log.debug(@This(), "notification: {s}\n", .{notif.method});
diff --git a/src/main.zig b/src/main.zig
index 0093d54..1ac8b57 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -333,6 +333,8 @@ fn startEditor(allocator: std.mem.Allocator) FatalError!void {
                         buffer.findReferences() catch |e| log.err(@This(), "find references LSP error: {}", .{e});
                     } else if (editor.mode == .normal and eql(u8, multi_key, " n")) {
                         try buffer.renamePrompt();
+                    } else if (editor.mode == .normal and eql(u8, multi_key, " l")) {
+                        buffer.format() catch |e| log.err(@This(), "format LSP error: {}", .{e});
                     } else if (editor.mode == .normal and eql(u8, key, "r") and editor.key_queue.items[1].printable != null) {
                         const macro_name: u8 = @intCast(key2.printable.?[0]);
                         try editor.startMacro(macro_name);
