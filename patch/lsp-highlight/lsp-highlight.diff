diff --git a/src/buffer.zig b/src/buffer.zig
index f8ac475..f2a50e5 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -64,6 +64,7 @@ pub const Buffer = struct {
     uncommitted_changes: std.ArrayList(cha.Change),
     lsp_connections: std.ArrayList(*lsp.LspConnection),
     scratch: bool = false,
+    highlights: std.ArrayList(Span),
     allocator: Allocator,
 
     pub fn init(allocator: Allocator, path: ?[]const u8, content_raw: []const u8) !Buffer {
@@ -104,6 +105,7 @@ pub const Buffer = struct {
             .uncommitted_changes = std.ArrayList(cha.Change).init(allocator),
             .lsp_connections = std.ArrayList(*lsp.LspConnection).init(allocator),
             .scratch = scratch,
+            .highlights = std.ArrayList(Span).init(allocator),
             .allocator = allocator,
         };
         _ = try self.syncFs();
@@ -148,6 +150,7 @@ pub const Buffer = struct {
         self.line_positions.deinit();
         self.line_byte_positions.deinit();
         self.indents.deinit();
+        self.highlights.deinit();
 
         for (self.history.items) |*i| {
             for (i.items) |*c| c.deinit();
@@ -605,6 +608,12 @@ pub const Buffer = struct {
         }
     }
 
+    pub fn highlight(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.highlight();
+        }
+    }
+
     pub fn renamePrompt(self: *Buffer) !void {
         const cmd = &main.editor.command_line;
         const line = self.lineContent(@intCast(self.cursor.row));
diff --git a/src/color.zig b/src/color.zig
index 1335218..20721b7 100644
--- a/src/color.zig
+++ b/src/color.zig
@@ -90,6 +90,7 @@ pub const Attr = union(enum) {
 pub const attributes = enum {
     pub const text = &[_]Attr{.{ .fg = color.white }};
     pub const selection = &[_]Attr{.{ .bg = color.gray3 }};
+    pub const highlight = &[_]Attr{.{ .bg = color.gray3 }};
     pub const keyword = &[_]Attr{.{ .fg = color.magenta }};
     pub const string = &[_]Attr{.{ .fg = color.green }};
     pub const literal = &[_]Attr{.{ .fg = color.yellow }};
diff --git a/src/lsp.zig b/src/lsp.zig
index 3781d75..bb56913 100644
--- a/src/lsp.zig
+++ b/src/lsp.zig
@@ -9,6 +9,7 @@ const buf = @import("buffer.zig");
 const cha = @import("change.zig");
 const core = @import("core.zig");
 const Cursor = core.Cursor;
+const Span = core.Span;
 const fs = @import("fs.zig");
 const log = @import("log.zig");
 const main = @import("main.zig");
@@ -118,6 +119,7 @@ pub const LspConnection = struct {
                     .rename = .{
                         .prepareSupport = true,
                     },
+                    .documentHighlight = .{},
                 },
                 .workspace = .{
                     .workspaceFolders = true,
@@ -189,6 +191,8 @@ pub const LspConnection = struct {
                         try self.handleHoverResponse(arena.allocator(), response_result);
                     } else if (std.mem.eql(u8, method, "textDocument/rename")) {
                         try self.handleRenameResponse(arena.allocator(), response_result);
+                    } else if (std.mem.eql(u8, method, "textDocument/documentHighlight")) {
+                        try self.handleHighlightResponse(arena.allocator(), response_result);
                     }
                 },
                 .notification => |notif| {
@@ -235,6 +239,14 @@ pub const LspConnection = struct {
         });
     }
 
+    pub fn highlight(self: *LspConnection) !void {
+        const buffer = main.editor.active_buffer;
+        try self.sendRequest("textDocument/documentHighlight", .{
+            .textDocument = .{ .uri = buffer.uri },
+            .position = buffer.cursor.toLsp(),
+        });
+    }
+
     pub fn rename(self: *LspConnection, new_name: []const u8) !void {
         const buffer = main.editor.active_buffer;
         try self.sendRequest("textDocument/rename", .{
@@ -511,6 +523,21 @@ pub const LspConnection = struct {
         try self.applyWorkspaceEdit(result.value);
     }
 
+    fn handleHighlightResponse(self: *LspConnection, arena: Allocator, resp: ?std.json.Value) !void {
+        _ = self;
+        if (resp == null or resp.? == .null) return;
+        const result = try std.json.parseFromValue([]const types.DocumentHighlight, arena, resp.?, .{});
+        const buffer = main.editor.active_buffer;
+        buffer.highlights.clearRetainingCapacity();
+        for (result.value) |hi| {
+            try buffer.highlights.append(Span.fromLsp(hi.range));
+        }
+        if (buffer.highlights.items.len > 0) {
+            log.debug(@This(), "got {} highlights\n", .{buffer.highlights.items.len});
+            main.editor.dirty.draw = true;
+        }
+    }
+
     fn handleNotification(self: *LspConnection, arena: Allocator, notif: lsp.JsonRPCMessage.Notification) !void {
         _ = self;
         // log.debug(@This(), "notification: {s}\n", .{notif.method});
diff --git a/src/main.zig b/src/main.zig
index 285f63d..69bd182 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -410,6 +410,13 @@ fn startEditor(allocator: std.mem.Allocator) !void {
         } else if (editor.dirty.cursor) {
             editor.dirty.cursor = false;
             try term.updateCursor();
+
+            if (buffer.highlights.items.len > 0) {
+                buffer.highlights.clearRetainingCapacity();
+                // redraw next frame to clear invalid highlights
+                editor.dirty.draw = true;
+            }
+            try buffer.highlight();
         }
         perf.draw = timer.lap();
 
diff --git a/src/terminal.zig b/src/terminal.zig
index cfd8b1d..c0986af 100644
--- a/src/terminal.zig
+++ b/src/terminal.zig
@@ -229,6 +229,14 @@ pub const Terminal = struct {
                     }
                 }
 
+                if (main.editor.mode == .normal) {
+                    for (buffer.highlights.items) |hi| {
+                        if (hi.inRange(.{ .row = buffer_row, .col = buffer_col })) {
+                            try co.attributes.write(co.attributes.highlight, attrs_stream.writer());
+                        }
+                    }
+                }
+
                 if (buffer.diagnostics.items.len > 0) {
                     for (buffer.diagnostics.items) |diagnostic| {
                         const range = diagnostic.range;
