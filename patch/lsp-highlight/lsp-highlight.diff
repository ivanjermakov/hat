diff --git a/src/buffer.zig b/src/buffer.zig
index f3c72f9..14b45b3 100644
--- a/src/buffer.zig
+++ b/src/buffer.zig
@@ -81,6 +81,7 @@ pub const Buffer = struct {
     uncommitted_changes: std.array_list.Aligned(cha.Change, null) = .empty,
     lsp_connections: std.array_list.Aligned(*lsp.LspConnection, null) = .empty,
     scratch: bool = false,
+    highlights: std.array_list.Aligned(Span, null) = .empty,
     allocator: Allocator,
 
     pub fn init(allocator: Allocator, uri: []const u8) !Buffer {
@@ -172,6 +173,7 @@ pub const Buffer = struct {
 
         self.line_positions.deinit(self.allocator);
         self.line_byte_positions.deinit(self.allocator);
+        self.highlights.deinit(self.allocator);
 
         for (self.history.items) |*i| {
             for (i.items) |*c| c.deinit();
@@ -476,7 +478,7 @@ pub const Buffer = struct {
         main.editor.dirty.completion = true;
     }
 
-    pub fn commitChanges(self: *Buffer) FatalError!void {
+    pub fn commitChanges(self: *Buffer) !void {
         if (self.uncommitted_changes.items.len == 0) {
             log.debug(@This(), "no changes to commit\n", .{});
             return;
@@ -721,6 +723,24 @@ pub const Buffer = struct {
         return self.content_raw.items[bs.start..bs.end];
     }
 
+    pub fn goToDefinition(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.goToDefinition();
+        }
+    }
+
+    pub fn findReferences(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.findReferences();
+        }
+    }
+
+    pub fn showHover(self: *Buffer) !void {
+        for (self.lsp_connections.items) |conn| {
+            try conn.hover();
+        }
+    }
+
     pub fn renamePrompt(self: *Buffer) !void {
         const cmd = &main.editor.command_line;
         const line = self.lineContent(@intCast(self.cursor.row));
diff --git a/src/color.zig b/src/color.zig
index 0a32a64..1732a02 100644
--- a/src/color.zig
+++ b/src/color.zig
@@ -96,6 +96,7 @@ pub const Attribute = union(enum) {
     pub const diagnostic_warn = &[_]Attribute{ .curly_underline, .{ .underline = color.yellow } };
     pub const diagnostic_info = &[_]Attribute{ .curly_underline, .{ .underline = color.magenta } };
     pub const diagnostic_hint = &[_]Attribute{ .{ .fg = color.gray6 } };
+    pub const highlight = &[_]Attribute{ .{ .bg = color.gray3 } };
 
     pub fn writeSlice(attrs: []const Attribute, writer: *std.io.Writer) !void {
         for (attrs) |attr| {
@@ -112,3 +113,4 @@ pub const Attribute = union(enum) {
         };
     }
 };
+
diff --git a/src/lsp.zig b/src/lsp.zig
index c09c036..474223b 100644
--- a/src/lsp.zig
+++ b/src/lsp.zig
@@ -9,6 +9,7 @@ const buf = @import("buffer.zig");
 const cha = @import("change.zig");
 const core = @import("core.zig");
 const Cursor = core.Cursor;
+const Span = core.Span;
 const fs = @import("fs.zig");
 const log = @import("log.zig");
 const main = @import("main.zig");
@@ -96,6 +97,7 @@ pub const LspConnection = struct {
                 .rename = .{
                     .prepareSupport = true,
                 },
+                .documentHighlight = .{},
             },
             .workspace = .{
                 .workspaceFolders = true,
@@ -190,6 +192,8 @@ pub const LspConnection = struct {
                         try self.handleHoverResponse(arena.allocator(), response_result);
                     } else if (std.mem.eql(u8, method, "textDocument/rename")) {
                         try self.handleRenameResponse(arena.allocator(), response_result);
+                    } else if (std.mem.eql(u8, method, "textDocument/documentHighlight")) {
+                        try self.handleHighlightResponse(arena.allocator(), response_result);
                     }
                 },
                 .notification => |notif| {
@@ -250,6 +254,14 @@ pub const LspConnection = struct {
         });
     }
 
+    pub fn highlight(self: *LspConnection) !void {
+        const buffer = main.editor.active_buffer;
+        try self.sendRequest("textDocument/documentHighlight", .{
+            .textDocument = .{ .uri = buffer.uri },
+            .position = buffer.cursor.toLsp(),
+        });
+    }
+
     pub fn rename(self: *LspConnection, new_name: []const u8) !void {
         if ((self.server_init orelse return).value.capabilities.renameProvider == null) return;
         const buffer = main.editor.active_buffer;
@@ -578,6 +590,20 @@ pub const LspConnection = struct {
         try self.sendResponse("workspace/configuration", request.id, response.items);
     }
 
+    fn handleHighlightResponse(self: *LspConnection, arena: Allocator, resp: ?std.json.Value) !void {
+        if (resp == null or resp.? == .null) return;
+        const result = try std.json.parseFromValue([]const types.DocumentHighlight, arena, resp.?, .{});
+        const buffer = main.editor.active_buffer;
+        buffer.highlights.clearRetainingCapacity();
+        for (result.value) |hi| {
+            try buffer.highlights.append(self.allocator, Span.fromLsp(hi.range));
+        }
+        if (buffer.highlights.items.len > 0) {
+            log.debug(@This(), "got {} highlights\n", .{buffer.highlights.items.len});
+            main.editor.dirty.draw = true;
+        }
+    }
+
     const parse_opts = std.json.ParseOptions{ .ignore_unknown_fields = true };
     const stringify_opts = std.json.Stringify.Options{ .emit_null_optional_fields = false };
 };
diff --git a/src/main.zig b/src/main.zig
index d117195..148847d 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -618,8 +618,17 @@ pub fn startEditor(allocator: std.mem.Allocator) FatalError!void {
             term.draw() catch |e| log.err(@This(), "draw error: {}\n", .{e}, @errorReturnTrace());
         } else if (editor.dirty.cursor) {
             editor.dirty.cursor = false;
-            term.updateCursor() catch |e|
-                log.err(@This(), "update cursor error: {}\n", .{e}, @errorReturnTrace());
+            term.updateCursor() catch |e| log.err(@This(), "update cursor error: {}", .{e}, @errorReturnTrace());
+
+            if (buffer.highlights.items.len > 0) {
+                buffer.highlights.clearRetainingCapacity();
+                // redraw next frame to clear invalid highlights
+                editor.dirty.draw = true;
+            }
+            for (buffer.lsp_connections.items) |conn| {
+                conn.highlight() catch |e| log.err(@This(), "highlight LSP error: {}", .{e}, @errorReturnTrace());
+            }
+            term.updateCursor() catch |e| log.err(@This(), "update cursor error: {}\n", .{e}, @errorReturnTrace());
         }
         perf.draw = timer.lap();
 
diff --git a/src/terminal.zig b/src/terminal.zig
index 908d5e8..867c7c6 100644
--- a/src/terminal.zig
+++ b/src/terminal.zig
@@ -215,6 +215,14 @@ pub const Terminal = struct {
                         const attr = if (buffer.mode.isSelect()) co.Attribute.selection else co.Attribute.selection_normal;
                         try co.Attribute.writeSlice(attr, &attrs_writer);
                     }
+                } else {
+                    if (buffer.mode == .normal) {
+                        for (buffer.highlights.items) |hi| {
+                            if (hi.inRange(.{ .row = buffer_row, .col = buffer_col })) {
+                                try co.Attribute.writeSlice(co.Attribute.highlight, &attrs_writer);
+                            }
+                        }
+                    }
                 }
 
                 if (buffer.diagnostics.items.len > 0) {
