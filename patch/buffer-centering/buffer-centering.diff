diff --git a/src/core.zig b/src/core.zig
index 046dce8..d859dee 100644
--- a/src/core.zig
+++ b/src/core.zig
@@ -101,6 +101,7 @@ pub const SpanFlat = struct {
 };
 
 pub const Layout = struct {
+    left_padding: Area,
     number_line: Area,
     buffer: Area,
 };
diff --git a/src/editor.zig b/src/editor.zig
index 9e47642..bee1d42 100644
--- a/src/editor.zig
+++ b/src/editor.zig
@@ -19,12 +19,18 @@ const ur = @import("uri.zig");
 
 pub const config = Config{
     .end_of_buffer_char = null,
+    .centering_width = null,
 };
 
 pub const Config = struct {
     /// Char to denote terminal lines after end of buffer
     /// See vim's :h fillchars -> eob
     end_of_buffer_char: ?u8,
+    /// Imaginary width of a buffer that should be aligned (padded on the left).
+    /// `null` means "no centering".
+    /// If >`term_width`, padding is 0,
+    /// If <`term_width`, left padding is `(term_width-centering_width)/2`
+    centering_width: ?usize,
 };
 
 pub const Dirty = struct {
diff --git a/src/terminal.zig b/src/terminal.zig
index 99cd154..8b3bc17 100644
--- a/src/terminal.zig
+++ b/src/terminal.zig
@@ -401,20 +401,32 @@ pub fn terminalSize() !Dimensions {
 
 pub fn computeLayout(term_dims: Dimensions) Layout {
     const number_line_width = 5;
+    const padding_width = if (edi.config.centering_width) |cw|
+        if (term_dims.width > cw) @divFloor(term_dims.width - cw, 2) else 0
+    else
+        0;
+    const occupied_width = padding_width + number_line_width;
 
     return .{
-        .number_line = .{
+        .left_padding = .{
             .pos = .{},
+            .dims = .{
+                .height = term_dims.height,
+                .width = padding_width,
+            },
+        },
+        .number_line = .{
+            .pos = .{ .col = @intCast(padding_width) },
             .dims = .{
                 .height = term_dims.height,
                 .width = number_line_width,
             },
         },
         .buffer = .{
-            .pos = .{ .col = number_line_width },
+            .pos = .{ .col = @intCast(occupied_width) },
             .dims = .{
                 .height = term_dims.height,
-                .width = term_dims.width - number_line_width,
+                .width = term_dims.width - occupied_width,
             },
         },
     };
